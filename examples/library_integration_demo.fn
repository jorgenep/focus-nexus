// Focus Nexus Library Integration Demo
// This example demonstrates how to use external libraries with Focus Nexus

print("=== Focus Nexus Library Integration Demo ===")

// 1. C++ Library Integration
print("\n1. C++ Library Integration:")
print("Loading C++ math library...")

extern "libmath.so" as mathlib : cpp

// Call C++ functions
let cpp_sum = call_native(mathlib.add_numbers, 15, 25)
print("C++ Addition: 15 + 25 =", cpp_sum)

let cpp_product = call_native(mathlib.multiply_numbers, 7, 8)
print("C++ Multiplication: 7 * 8 =", cpp_product)

let cpp_power = call_native(mathlib.calculate_power, 2, 10)
print("C++ Power: 2^10 =", cpp_power)

// 2. Python Library Integration
print("\n2. Python Library Integration:")
print("Loading Python math module...")

extern "math_module.py" as pymath : python

// Call Python functions
let py_fib = call_native(pymath.fibonacci, 8)
print("Python Fibonacci(8):", py_fib)

let py_factorial = call_native(pymath.factorial, 6)
print("Python Factorial(6):", py_factorial)

let py_prime = call_native(pymath.is_prime, 29)
print("Python is_prime(29):", py_prime)

// Use Python classes
print("Creating Python Calculator instance...")
let py_calc = call_native(pymath.Calculator)
let calc_result = call_native(py_calc.add, 100, 50)
print("Python Calculator: 100 + 50 =", calc_result)

// 3. Java Library Integration
print("\n3. Java Library Integration:")
print("Loading Java MathUtils class...")

extern "MathUtils" as javamath : java

// Call static Java methods
let java_sum = call_native(javamath.add, 100, 200)
print("Java Addition: 100 + 200 =", java_sum)

let java_subtract = call_native(javamath.subtract, 500, 150)
print("Java Subtraction: 500 - 150 =", java_subtract)

let java_perfect = call_native(javamath.isPerfectSquare, 16)
print("Java isPerfectSquare(16):", java_perfect)

let java_reversed = call_native(javamath.reverseString, "Focus Nexus")
print("Java Reversed String:", java_reversed)

// Use Java objects
print("Creating Java MathUtils instance...")
let java_obj = call_native(javamath.new, 10.0)
let java_multiplied = call_native(java_obj.multiply, 3.5)
print("Java Object Multiplication:", java_multiplied)

// 4. Custom Plugin Integration
print("\n4. Custom Plugin Integration:")
print("Loading custom plugin...")

plugin "my_plugin.so" as myplugin

// Use plugin functions
let plugin_distance = call_native(myplugin.calculate_distance, 0, 0, 3, 4)
print("Plugin Distance Calculation (0,0) to (3,4):", plugin_distance)

let plugin_random = call_native(myplugin.random_number, 1, 100)
print("Plugin Random Number (1-100):", plugin_random)

let plugin_capitalized = call_native(myplugin.capitalize_words, "hello world from focus nexus")
print("Plugin Capitalized String:", plugin_capitalized)

// 5. Dynamic Library Loading
print("\n5. Dynamic Library Loading:")

// Load library at runtime
let loaded = load_library("additional_lib.so", "extralib", "cpp")
if loaded:
{
    print("Additional library loaded successfully")
    
    // Use the dynamically loaded library
    try:
    {
        let extra_result = call_native(extralib.advanced_function, 42, "test")
        print("Extra library result:", extra_result)
    }
    catch(error):
    {
        print("Extra library function not available:", error)
    }
}
else:
{
    print("Failed to load additional library (this is expected in demo)")
}

// 6. Error Handling with External Libraries
print("\n6. Error Handling Example:")

function safe_library_call(library_name, function_name, args):
{
    try:
    {
        // This is a conceptual example - actual syntax may vary
        print("Attempting to call", library_name + "." + function_name)
        return call_native(library_name.function_name, args)
    }
    catch(error):
    {
        print("Library call failed:", error)
        return nil
    }
    finally:
    {
        print("Library call attempt completed")
    }
}

// Example of safe calling
let safe_result = safe_library_call("mathlib", "add_numbers", [10, 20])
print("Safe call result:", safe_result)

// 7. Library Information and Management
print("\n7. Library Management:")

// Check if libraries are loaded (conceptual - would need implementation)
print("Checking loaded libraries...")

// List all loaded libraries
function list_loaded_libraries():
{
    print("Currently loaded libraries:")
    print("- mathlib (C++)")
    print("- pymath (Python)")
    print("- javamath (Java)")
    print("- myplugin (Custom)")
}

list_loaded_libraries()

// 8. Performance Comparison
print("\n8. Performance Comparison:")

function performance_test():
{
    let iterations = 1000
    let start_time = clock()
    
    // Test native Focus Nexus function
    for i = 0; i < iterations; i = i + 1:
    {
        let native_result = 15 + 25  // Native operation
    }
    
    let native_time = clock() - start_time
    print("Native operations time:", native_time, "seconds")
    
    // Test C++ library function
    start_time = clock()
    for i = 0; i < iterations; i = i + 1:
    {
        let cpp_result = call_native(mathlib.add_numbers, 15, 25)
    }
    
    let cpp_time = clock() - start_time
    print("C++ library calls time:", cpp_time, "seconds")
    
    print("Performance ratio (cpp/native):", cpp_time / native_time)
}

performance_test()

// 9. Complex Data Handling
print("\n9. Complex Data Handling:")

// Working with arrays/lists through external libraries
let number_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print("Original list:", number_list)

// Process list through external library (conceptual)
try:
{
    let processed_list = call_native(mathlib.process_array, number_list)
    print("Processed by C++ library:", processed_list)
}
catch(error):
{
    print("Array processing not available:", error)
}

// 10. Cleanup and Resource Management
print("\n10. Cleanup:")

function cleanup_libraries():
{
    print("Cleaning up library resources...")
    // In a real implementation, you might want to explicitly unload libraries
    // unload_library("mathlib")
    // unload_library("pymath")
    // unload_library("javamath")
    // unload_library("myplugin")
    print("Cleanup completed")
}

cleanup_libraries()

print("\n=== Demo Complete ===")
print("This demo showed how Focus Nexus can integrate with:")
print("- C++ shared libraries for high-performance computing")
print("- Python modules for rapid prototyping and data science")
print("- Java classes for enterprise integration")
print("- Custom plugins for specialized functionality")
print("\nFocus Nexus provides a unified interface to leverage")
print("existing codebases and extend functionality seamlessly!")